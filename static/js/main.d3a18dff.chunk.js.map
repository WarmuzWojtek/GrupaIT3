{"version":3,"sources":["components/Header/Header.js","components/Card/Card.js","components/Button/Button.js","components/Content/Content.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Card","forwardRef","props","ref","text","quote","author","Button","onClick","click","Content","useState","data","setData","setText","previousTexts","setPreviousTexts","card","useRef","useEffect","fetch","then","response","json","current","style","transform","animation","index","Math","floor","random","length","oldTexts","updatedPreviousTexts","prevTexts","pop","alert","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAEe,SAASA,IACtB,OACE,qBAAKC,UAAU,SAAf,SACE,+C,kBCSSC,G,YAXFC,sBAAW,SAACC,EAAOC,GAC9B,OACE,sBAAKA,IAAKA,EAAKJ,UAAU,OAAzB,UACE,qBAAKA,UAAU,eACf,qBAAKA,UAAU,WAAf,SAA2BG,EAAME,KAAKC,QACtC,qBAAKN,UAAU,gBACf,qBAAKA,UAAU,SAAf,SAAyBG,EAAME,KAAKE,gB,MCP3B,SAASC,EAAOL,GAC7B,OACE,wBAAQM,QAASN,EAAMO,MAAOV,UAAU,MAAxC,SACGG,EAAME,OCAE,SAASM,EAAQR,GAC9B,IAGA,EAAwBS,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOP,EAAP,KAAaU,EAAb,KACA,EAA0CH,mBAAS,IAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KAEMC,EAAOC,iBAAO,MAEpBC,qBAAU,WACRC,MATA,yIAUGC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACT,GAAD,OAAUC,EAAQD,QACzB,IAqBH,OACE,qBAAKb,UAAU,UAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAACQ,EAAD,CAAQE,MAtBG,WACfQ,EAAKO,QAAQC,MAAMC,UAAY,gBAC/BT,EAAKO,QAAQC,MAAME,UAAY,iBAC/B,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWnB,EAAKoB,QAC9ClB,EAAQF,EAAKgB,IACb,IAAMK,EAAWlB,EACXmB,EAAoB,sBAAOD,GAAP,CAAiB7B,IAC3CY,EAAiBkB,IAeY9B,KAAK,eAC9B,cAACG,EAAD,CAAQE,MAbW,WACvB,IAAM0B,EAAS,YAAOpB,GAClBoB,EAAUH,OAAS,GACrBlB,EAAQqB,EAAUA,EAAUH,OAAS,IACrCG,EAAUC,MACVpB,EAAiBmB,IACZE,MAAM,+BAOwBjC,KAAK,wBACtC,cAAC,EAAD,CAAMD,IAAKc,EAAMb,KAAMA,SChChBkC,MATf,WACE,OACE,sBAAKvC,UAAU,MAAf,UACE,cAACD,EAAD,IACA,cAACY,EAAD,QCIS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3a18dff.chunk.js","sourcesContent":["import \"./header.css\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <p>daily quotes</p>\r\n    </div>\r\n  );\r\n}\r\n","import { forwardRef } from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = forwardRef((props, ref) => {\r\n  return (\r\n    <div ref={ref} className=\"card\">\r\n      <div className=\"firstQuote\"></div>\r\n      <div className=\"sentence\">{props.text.quote}</div>\r\n      <div className=\"secondQuote\"></div>\r\n      <div className=\"author\">{props.text.author}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Card;\r\n","import \"./button.css\";\r\n\r\nexport default function Button(props) {\r\n  return (\r\n    <button onClick={props.click} className=\"btn\">\r\n      {props.text}\r\n    </button>\r\n  );\r\n}\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport \"./content.css\";\r\nimport Card from \"../Card/Card\";\r\nimport Button from \"../Button/Button\";\r\n\r\nexport default function Content(props) {\r\n  const apiURL =\r\n    \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\";\r\n\r\n  const [data, setData] = useState();\r\n  const [text, setText] = useState({});\r\n  const [previousTexts, setPreviousTexts] = useState([]);\r\n\r\n  const card = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetch(apiURL)\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data));\r\n  }, []);\r\n\r\n  const loadText = () => {\r\n    card.current.style.transform = \"translateY(0)\";\r\n    card.current.style.animation = \"fadeIn 1s both\";\r\n    const index = Math.floor(Math.random() * data.length);\r\n    setText(data[index]);\r\n    const oldTexts = previousTexts;\r\n    const updatedPreviousTexts = [...oldTexts, text];\r\n    setPreviousTexts(updatedPreviousTexts);\r\n  };\r\n\r\n  const loadPreviousText = () => {\r\n    const prevTexts = [...previousTexts];\r\n    if (prevTexts.length > 1) {\r\n      setText(prevTexts[prevTexts.length - 1]);\r\n      prevTexts.pop();\r\n      setPreviousTexts(prevTexts);\r\n    } else alert(\"there`s no previous quotes\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"container\">\r\n        <Button click={loadText} text=\"show quote\" />\r\n        <Button click={loadPreviousText} text=\"show previous quote\" />\r\n        <Card ref={card} text={text} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Content from \"./components/Content/Content\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Content></Content>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}